// services/authService.js
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Persona, Rol, PersonaRol } = require('../../models/db_models');
const transporter = require('../../config/emailConfig');

// Objeto global para almacenar los c√≥digos de reseteo temporalmente
// Estructura: { [email]: { code: '1234', expiration: timestamp } }
const resetCodes = {};

/**
 * Env√≠a un c√≥digo de 4 d√≠gitos al correo del usuario y lo almacena temporalmente en memoria.
 * @param {string} email 
 */
exports.forgotPassword = async (email) => {
  // Buscar al usuario por email
  const persona = await Persona.findOne({ where: { email } });
  if (!persona) {
    throw new Error('No existe un usuario con ese email');
  }

  // Generar un c√≥digo de 4 d√≠gitos
  const code = Math.floor(1000 + Math.random() * 9000).toString();
  // Establecer expiraci√≥n para 1 hora
  const expiration = Date.now() + 60 * 60 * 1000; // 1 hora en milisegundos

  // Guardar el c√≥digo en el objeto global
  resetCodes[email] = { code, expiration };

  // Configurar el correo
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: email,
    subject: 'C√≥digo de recuperaci√≥n de contrase√±a',
    html: `
      <h3>Recuperaci√≥n de contrase√±a</h3>
      <p>Tu c√≥digo de recuperaci√≥n es: <strong>${code}</strong></p>
      <p>Este c√≥digo expira en 1 hora.</p>
    `
  };

  // Enviar el correo
  await transporter.sendMail(mailOptions);

  return true;
};

/**
 * Verifica el c√≥digo enviado y actualiza la contrase√±a del usuario.
 * @param {string} email 
 * @param {string} code 
 * @param {string} newPassword 
 */
exports.resetPassword = async (email, code, newPassword) => {
  // Verificar que el c√≥digo exista para ese email
  if (!resetCodes[email]) {
    throw new Error('C√≥digo inv√°lido o no solicitado');
  }
  const { code: storedCode, expiration } = resetCodes[email];
  // Verificar expiraci√≥n
  if (Date.now() > expiration) {
    delete resetCodes[email];
    throw new Error('El c√≥digo ha expirado');
  }
  // Verificar que el c√≥digo coincida
  if (code !== storedCode) {
    throw new Error('C√≥digo incorrecto');
  }

  // Buscar al usuario para actualizar la contrase√±a
  const persona = await Persona.findOne({ where: { email } });
  if (!persona) {
    throw new Error('Usuario no encontrado');
  }

  // Hashear la nueva contrase√±a
  const hashedPassword = await bcrypt.hash(newPassword, 10);
  persona.password = hashedPassword;
  await persona.save();

  // Limpiar el c√≥digo de reseteo
  delete resetCodes[email];

  return true;
};

/**
 * Funci√≥n ya existente para obtener el usuario autenticado.
 */
exports.getAuthenticatedUser = async (token) => {
  try {
    console.log("üì¢ Token recibido:", token);
    console.log("üîë Usando JWT_SECRET:", process.env.JWT_SECRET);

    // üîé Verificar el token
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log("‚úÖ Token verificado:", decoded);
    } catch (error) {
      console.error("‚ùå Error en la verificaci√≥n del token:", error.message);
      throw new Error("Token inv√°lido o expirado");
    }

    // üîé Buscar al usuario en la base de datos
    const persona = await Persona.findOne({
      where: { id_persona: decoded.id_persona },
      include: {
        model: Rol,
        as: "roles", // Aseg√∫rate de que coincida con el alias en la relaci√≥n
        through: { attributes: [] }, // No incluir la tabla intermedia
        attributes: ["id_rol", "descripcion"]
      }
    });

    if (!persona) {
      throw new Error("Usuario no encontrado");
    }

    // üîé Obtener roles correctamente
    const roles = persona.roles.map((rol) => rol.id_rol);
    console.log("üìå Roles del usuario:", roles);

    return {
      id_persona: persona.id_persona,
      email: persona.email,
      roles,
    };
  } catch (error) {
    console.error("‚ùå Error en getAuthenticatedUser:", error.message);
    throw new Error("Token no v√°lido");
  }
};
