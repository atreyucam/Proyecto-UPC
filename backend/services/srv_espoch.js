const axios = require("axios");
const https = require("https");
const crypto = require("crypto");

// üîß Agente HTTPS con compatibilidad de renegociaci√≥n legacy SOLO para ESPOCH
const espochAgent = new https.Agent({
  rejectUnauthorized: false, // Ignora la verificaci√≥n SSL
  secureOptions: crypto.constants.SSL_OP_LEGACY_SERVER_CONNECT, // Habilita renegociaci√≥n legacy
});

// üåê Funci√≥n para obtener datos de la API de ESPOCH con validaci√≥n de respuesta
exports.fetchPersonaDataFromESPOCH = async (cedula) => {
  try {
    const url = `${process.env.ESPOCH_API_URL}/${cedula}`;
    console.log(`üîç Consultando API ESPOCH: ${url}`);

    const response = await axios.get(url, {
      httpsAgent: espochAgent, // Usa el agente HTTPS configurado solo para esta API
      headers: {
        "User-Agent": "Mozilla/5.0", // Simula ser un navegador
      },
      timeout: 10000, // Aumenta el tiempo de espera
    });

    // ‚úÖ Si la respuesta es exitosa, retorna los datos
    if (response.data.success) {
      console.log("‚úÖ Respuesta de ESPOCH:", response.data);
      return response.data.listado[0];
    }

    // ‚ùå Si no encuentra la c√©dula, devuelve el mensaje exacto sin errores adicionales
    console.log("‚ùå C√©dula no encontrada en ESPOCH.");
    throw new Error("No se ha encontrado informaci√≥n en la Dinardap");

  } catch (error) {
    // üö® Si el error proviene de la API (c√©dula no encontrada), enviar solo ese mensaje
    if (error.message.includes("No se ha encontrado informaci√≥n en la Dinardap")) {
      throw error;
    }

    // ‚ùå Si el error es otro (problema con la API), dar un mensaje gen√©rico
    console.error("‚ùå Error al consultar API ESPOCH:", error.message);
    throw new Error("Error consultando API externa");
  }
};
